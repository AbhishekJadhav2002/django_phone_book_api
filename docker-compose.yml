services:
  web:
    container_name: instahyre_coding_task_api
    image: abhishekjadhav2002/instahyre_coding_task_api:latest
    build: .
    ports:
      - "${PORT}:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - WTF_CSRF_SECRET_KEY=${WTF_CSRF_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - CACHE_REDIS_HOST=${CACHE_REDIS_HOST}
      - CACHE_REDIS_PORT=${CACHE_REDIS_PORT}
      - CACHE_REDIS_DB=${CACHE_REDIS_DB}
      - CACHE_REDIS_URL=${CACHE_REDIS_URL}
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:${PORT}/health"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure
  db:
    container_name: instahyre_coding_task_api_db
    image: postgres:alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${POSTGRES_USER}
    healthcheck:
      test: pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
  redis:
    container_name: instahyre_coding_task_api_redis
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
    restart: on-failure

volumes:
  postgres_data:
